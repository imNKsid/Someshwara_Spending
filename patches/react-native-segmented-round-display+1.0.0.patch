diff --git a/node_modules/react-native-segmented-round-display/index.js b/node_modules/react-native-segmented-round-display/index.js
index 291f9b3..d0da1b3 100644
--- a/node_modules/react-native-segmented-round-display/index.js
+++ b/node_modules/react-native-segmented-round-display/index.js
@@ -106,7 +106,7 @@ var SegmentedRoundDisplay = function SegmentedRoundDisplay(_ref) {
         newArc.end += arcSpacing * index;
       }
 
-      newArc.filled = scaleValue(goal.filled, [0, goal.total], [newArc.start, newArc.end]);
+      // newArc.filled = scaleValue(goal.filled, [0, goal.total], [newArc.start, newArc.end]);
       return newArc;
     });
     setArcs(newArcs);
diff --git a/node_modules/react-native-segmented-round-display/src/index.js b/node_modules/react-native-segmented-round-display/src/index.js
index 3193c52..17be713 100644
--- a/node_modules/react-native-segmented-round-display/src/index.js
+++ b/node_modules/react-native-segmented-round-display/src/index.js
@@ -133,84 +133,9 @@ const SegmentedRoundDisplay = ({
 
   return (
     <Svg width={svgWidth} height={svgHeight} style={style}>
-      {arcs.map((arc, index) => (
-        <G key={index.toString()}>
-          <Path
-            fill="none"
-            stroke={emptyArcColor}
-            strokeWidth={emptyArcWidth}
-            strokeLinecap="round"
-            d={drawArc(arc.centerX, arc.centerY, radius, arc.start, arc.end)}
-          />
      
-          {animated && arc.filled > arc.start && (
-            <Spring
-              from={{ x: arc.start, y: 0 }}
-              to={{ x: arc.filled + 0.6, y: filledArcWidth }}
-              config={{
-                duration: animationDuration / totalArcs,
-                delay: (animationDuration / totalArcs) * index,
-              }}
-            >
-              {(props) => (
-                <Path
-                  fill="none"
-                  stroke={
-                    arc.isComplete
-                      ? filledArcColor
-                      : incompleteArcColor || filledArcColor
-                  }
-                  strokeWidth={props.y}
-                  strokeLinecap="round"
-                  d={drawArc(
-                    arc.centerX,
-                    arc.centerY,
-                    radius,
-                    arc.start,
-                    props.x
-                  )}
-                />
-              )}
-            </Spring>
-          )}
 
-          {!animated && arc.filled > arc.start && (
-            <Path
-              fill="none"
-              stroke={
-                arc.isComplete
-                  ? filledArcColor
-                  : incompleteArcColor || filledArcColor
-              }
-              strokeWidth={filledArcWidth}
-              strokeLinecap="round"
-              d={drawArc(
-                arc.centerX,
-                arc.centerY,
-                radius,
-                arc.start,
-                arc.filled
-              )}
-            />
-          )}
-        </G>
-      ))}
       
-      {displayValue && (
-        <G>
-          {!animated && renderDisplayValue()}
-
-          {animated && (
-            <Spring
-              from={{ x: arcsStart, value: 0 }}
-              to={{ x: arcs[arcs.length - 1].filled, value: totalFilledValue }}
-              config={{ duration: animationDuration }}
-            >
-              {(props) => renderDisplayValue(props.x, props.value)}
-            </Spring>
-          )}
-        </G>
-      )}
     </Svg>
   );
 };
